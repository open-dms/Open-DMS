// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/// for: next-auth

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  uuid              String   @unique @default(uuid())
  userId            String   @db.ObjectId
  dateCreated       DateTime @default(now())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.ObjectId
  access_token      String?  @db.ObjectId
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.ObjectId
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("profiles")
}

model Session {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  uuid         String    @unique @default(uuid())
  dateCreated  DateTime? @default(now())
  sessionToken String    @unique
  userId       String    @db.ObjectId
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  uuid          String    @unique @default(uuid())
  name          String?
  email         String?   @unique
  dateCreated   DateTime  @default(now())
  emailVerified DateTime?
  emailAdded    DateTime?
  emailChanged  DateTime?
  teamAdded     DateTime?
  teamVerified  DateTime?
  teamChanged   DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("clients")
}

model VerificationToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  uuid        String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  type        String   @default("signin")
  identifier  String
  token       String   @unique
  expires     DateTime

  @@unique([identifier, token])
  @@map("tokens")
}

/// end: next-auth

enum NodeVariant {
  PLACE
  VENDOR
  EVENT
  CONTACT
  ASSET
  DEFAULT
}

model Node {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  uuid        String      @unique @default(uuid())
  dateCreated DateTime    @default(now())
  lastFetched DateTime?
  lastUpdate  DateTime?   @updatedAt
  variant     NodeVariant @default(DEFAULT)
  title       String?
  source      String
  origin      String      @unique

  @@map("nodes")
}

enum ProjectState {
  EMPTY
  SETUP
  DRAFT
  READY
  PUBLIC
}

model Project {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  uuid        String       @unique @default(uuid())
  dateCreated DateTime     @default(now())
  lastFetched DateTime?
  lastUpdate  DateTime?    @updatedAt
  state       ProjectState @default(EMPTY)
  title       String?
  source      String

  @@map("projects")
}
